---

- name: Firewall open Port 80 and 443
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  loop:
    - http
    - https

- name: Set kernel parameters
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
    sysctl_file: /etc/sysctl.d/caddy.conf
  loop:
    - {name: "net.ipv4.ip_unprivileged_port_start", value: "80"}

# enable fallback nameserver in case pihole is running on the same host
- name: Enable fallback nameserver in resolv.conf
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - {regexp: '^nameserver 1\.1\.1\.1', line: 'nameserver 1.1.1.1'}
  when: nameserver_fallback_needed | d(false) | bool

- name: Create persistant container directories
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    # owner: "{{ _owner }}"
    # group: "{{ _group }}"
    mode: '0755'
  loop:
    - "{{ _caddy_config_dir }}"
    - "{{ _caddy_data_dir }}"

- name: Template Caddyfile
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.template:
    src: "Caddyfile.j2"
    dest: "{{ _caddy_config_dir }}/Caddyfile"
    # owner: "{{ _owner }}"
    # group: "{{ _group }}"
    lstrip_blocks: true
    mode: "0600"
  register: _result
  # notify: Reload caddy configuration
  # check_mode: true

- name: evaluate _caddy_reload_required
  ansible.builtin.set_fact:
    _caddy_reload_required: "{{ true if _caddy_reload_required | d(false) | bool or _result.changed | bool else false }}"

- name: create root.crt copy helper
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.copy:
    dest: "{{ _caddy_config_dir }}/root.crt.sh"
    content: |
      #!/bin/sh
      source_file="/config/root.crt"
      destination_file="/etc/ssl/certs/root.crt"
      # Check if the destination file exists
      if [ ! -e "${destination_file}" ]; then
        cp "${source_file}" "${destination_file}"
        echo "File copied from ${source_file} to ${destination_file}"
        /usr/sbin/update-ca-certificates
        exit 2
      else
        exit 0
      fi
    mode: '0755'
  when:
    - caddy_acme_internal | d(false) | bool

- name: write internal tls ca_root file
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.copy:
    dest: "{{ _caddy_config_dir }}/root.crt"
    content: "{{ acme_server_root_crt['content'] | b64decode }}"
    mode: '0644'
  # notify: Reload caddy configuration
  register: _result
  when:
    - acme_server_root_crt['content'] is defined
    - caddy_acme_internal | d(false) | bool

- name: evaluate _caddy_reload_required
  ansible.builtin.set_fact:
    _caddy_reload_required: "{{ true if _caddy_reload_required | d(false) | bool or _result.changed | bool else false }}"

- name: Include role sleif.podman podman_operation podman_pod_create
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_pod_create
  vars:
    podman_operation: podman_pod_create
  tags: always

- name: Pull container image docker.io/caddy
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_image:
    name: "docker.io/caddy"
    tag: "{{ caddy_container_version }}"
    # force: true

- name: Create Caddy container
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become: "{{ podman_rootless | bool }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    image: "docker.io/caddy:{{ caddy_container_version }}"
    pod: "{{ pod_name | default(omit) }}"
    state: created
    restart_policy: always
    recreate: "{{ podman_container_recreate | d(false) }}"
    # log_driver: journald
    network: "{{ podman_network_name if pod_name | d('') | length == 0 else [] }}"
    publish: "{{ container_published_ports | default([]) }}"
    volume:
      - "{{ _caddy_config_dir }}:/config:rw,z"
      - "{{ _caddy_config_dir }}/Caddyfile:/etc/caddy/Caddyfile:rw,z"
      - "{{ _caddy_data_dir }}:/data:rw,z"
    volumes_from: "{{ caddy_container_volumes_from | d([]) }}"
    env:
      TZ: "Europe/Berlin"
    timezone: "Europe/Berlin"
  register: _container_start_results
# - debug: var=_container_start_results

- name: Include role sleif.podman podman_operation podman_generate_systemd
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_generate_systemd
  vars:
    podman_operation: podman_generate_systemd
    target: "{{ pod_name if pod_name | d('') is truthy else container_name }}"
  tags: always

- name: slurp acme server
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.slurp:
    src: "{{ _caddy_data_dir }}/caddy/pki/authorities/local/root.crt"
  register: acme_server_root_crt
  when: caddy_acme_server | d(false) | bool

- name: copy internal tls ca_root file into /etc/ssl/certs/root.crt
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.command: podman exec {{ container_name }} sh /config/root.crt.sh
  register: _result
  changed_when: _result.rc != 0
  failed_when:
    - _result.rc != 0
    - _result.rc != 2
  when:
    - caddy_acme_internal | d(false) | bool

- name: evaluate _caddy_restart_required
  ansible.builtin.set_fact:
    _caddy_restart_required: "{{ true if _caddy_restart_required | d(false) | bool or _result.changed | bool else false }}"
