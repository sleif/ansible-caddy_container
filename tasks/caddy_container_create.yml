---

- name: Firewall open Port 80 and 443
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  loop:
    - http
    - https

- name: Set kernel parameters
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
    sysctl_file: /etc/sysctl.d/caddy.conf
  loop:
    - {name: "net.ipv4.ip_unprivileged_port_start", value: "80"}

# enable fallback nameserver in case pihole is running on the same host
- name: Enable fallback nameserver in resolv.conf
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - {regexp: '^nameserver 1\.1\.1\.1', line: 'nameserver 1.1.1.1'}
  when: nameserver_fallback_needed | d(false) | bool

- name: Create persistant container directories
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    # owner: "{{ _owner }}"
    # group: "{{ _group }}"
    mode: '0755'
  loop:
    - "{{ _caddy_config_dir }}"
    - "{{ _caddy_data_dir }}"

- name: Template Caddyfile
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.template:
    src: "Caddyfile.j2"
    dest: "{{ _caddy_config_dir }}/Caddyfile"
    # owner: "{{ _owner }}"
    # group: "{{ _group }}"
    lstrip_blocks: true
    mode: "0600"
  register: _result

- name: evaluate _caddy_reload_required for {{ caddy_container_name }}
  ansible.builtin.set_fact:
    _caddy_reload_required: "{{ true if _caddy_reload_required | d(false) | bool or _result.changed | bool else false }}"

- name: create root.crt copy helper
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.copy:
    dest: "{{ _caddy_config_dir }}/root.crt.sh"
    content: |
      #!/bin/sh
      source_file="{{ '/config/root.crt' if caddy_acme_internal | d(false) | bool
        else '/data/caddy/pki/authorities/local/root.crt' if caddy_acme_server | d(false) | bool else '' }}"
      destination_file="/etc/ssl/certs/root.crt"
      # Check if the destination file exists
      if diff -q "${source_file}" "${destination_file}" ; then
        exit 0
      else
        cp "${source_file}" "${destination_file}"
        echo "File copied from ${source_file} to ${destination_file}"
        /usr/sbin/update-ca-certificates
        exit 0
      fi
    mode: '0755'
  when:
    - caddy_acme_internal | d(false) | bool or caddy_acme_server | d(false) | bool

- name: slurp rootca certificate from internal acme server
  when:
    - caddy_acme_internal | d(false) | bool
  block:
    - name: call ansible role sleif.caddy_container against caddy frontend
      ansible.builtin.include_role:
        name: sleif.caddy_container
        apply:
          tags: caddy_container_slurp_root_ca
      vars:
        caddy_operation: caddy_container_slurp_root_ca
        caddy_container_name: "{{ caddy_frontend_container_name }}"
        podman_rootless: false
        _caddy_reload_required: false
        _caddy_restart_required: false

    - name: Include podman_init_vars.yml from sleif.podman
      ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files: sleif.podman/tasks/includes/podman_init_vars.yml
          paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"

    - name: Set additional facts
      ansible.builtin.set_fact:
        _caddy_config_dir: "{{ _container_storage_dir_base_local }}/{{ caddy_container_name }}/config"
        _caddy_data_dir: "{{ _container_storage_dir_base_local }}/{{ caddy_container_name }}/data"

- name: write internal tls ca_root file
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.copy:
    dest: "{{ _caddy_config_dir }}/root.crt"
    content: "{{ acme_server_root_crt['content'] | b64decode }}"
    mode: '0644'
  # notify: Reload caddy configuration
  register: _result
  when:
    - acme_server_root_crt['content'] is defined
    - caddy_acme_internal | d(false) | bool

- name: evaluate _caddy_reload_required for {{ caddy_container_name }}
  ansible.builtin.set_fact:
    _caddy_reload_required: "{{ true if _caddy_reload_required | d(false) | bool or _result.changed | bool else false }}"

- name: set_fact _build_images
  ansible.builtin.set_fact:
    _build_images:
      - name: "{{ caddy_container_image }}"
        tag: "{{ caddy_container_build_version }}"
  when:
    - caddy_custom_build_required

- name: include_role sleif.podman podman_operation podman_create_container for caddy
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_container_create
  vars:
    # podman_rootless: true
    # podman_network_name: "{{ podman_networks.podman_network_rootless.podman_network_name if podman_rootless | bool else
    #   podman_networks.podman_network_root.podman_network_name }}"
    podman_operation: podman_container_create
    container_name: '{{ caddy_container_name }}'
    target: "{{ pod_name if pod_name | d('') is truthy else caddy_container_name }}"
    _container:
      name: '{{ container_name }}'
      image:
        name: "{{ caddy_container_image }}"
        tag: "{{ caddy_container_version }}"
      build_required: "{{ caddy_custom_build_required }}"
      additional_images: "{{ _build_images | default([]) }}"
      containerfile_content: |-
        FROM {{ caddy_container_image }}:{{ caddy_container_build_version }} AS builder
        RUN xcaddy build {% if caddy_container_build_plugins | d([]) | length > 0 %}\
        {% for plugin in caddy_container_build_plugins %}
        --with {{ plugin }}{% if not loop.last %} \{% endif +%}
        {% endfor %}
        {% endif +%}
        FROM {{ caddy_container_image }}:{{ caddy_container_version }}
        COPY --from=builder /usr/bin/caddy /usr/bin/caddy
      # command: [
      #   "caddy",
      #   "run",
      #   "--config",
      #   "/etc/caddy/Caddyfile",
      #   "--adapter",
      #   "cadddyfile"
      # ]
      command:
        - sh
        - "-c"
        - "'/config/root.crt.sh; exec caddy run --config /etc/caddy/Caddyfile --adapter caddyfile'"
      memory: "{{ container_limit_memory | default(omit) }}"
      pod: "{{ pod_name | default('') }}"
      network: "{{ podman_network_name if pod_name | d('') is falsy else [] }}"
      publish: "{{ container_published_ports | default([]) if pod_name | d('') is falsy else [] }}"
      volumes:
        - {'host': '{{ _caddy_config_dir }}', 'target': '/config:rw,z', 'mode': '0755'}
        - {'host': '{{ _caddy_config_dir }}/Caddyfile', 'target': '/etc/caddy/Caddyfile:rw,z', 'state': 'present'}
        - {'host': '{{ _caddy_data_dir }}', 'target': '/data:rw,z', 'mode': '0755'}
      volumes_from: "{{ caddy_container_volumes_from | d([]) }}"
      # secrets:
      #   - {'name': 'webpassword', 'data': 'password'}
      #   - {'name': 'webpassword2', 'data': 'password'}
      env:
        TZ: "Europe/Berlin"
      timezone: "Europe/Berlin"
      # service:
      #   execstartpost: podman exec {{ caddy_container_name }} sh /config/root.crt.sh
  tags: podman_container_create

- name: evaluate _caddy_restart_required for {{ caddy_container_name }}
  ansible.builtin.set_fact:
    _caddy_restart_required: "{{ true if _caddy_restart_required | d(false) | bool else false }}"
